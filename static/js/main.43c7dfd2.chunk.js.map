{"version":3,"sources":["App.tsx","actions.ts","../../src/services/helpers.ts","../../src/services/trace.ts","reducer.ts","store.ts","../../src/services/reduxActionTrace.ts","index.tsx"],"names":["App","dispatch","useDispatch","onClick","a","type","payload","id","trace","action","style","actionName","path","lineNumber","details","collapsed","previousState","currentState","differences","previousStateObj","currentStateObj","order","error","Error","stacksWithSource","calleeExclude","fileNameExclude","filtered","item","spliced","splicedIndex","file","console","logs","Action","name","enable","log","diff","obj1","obj2","Object","diffs","compare","item1","type1","type2","item2","arr1","arr2","i","arraysMatch","objDiff","initialState","reduxActionTrace","disable","next","store","result","config","middleware","applyMiddleware","thunk","rootReducer","combineReducers","test","state","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43c7dfd2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { updateState } from './actions'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => dispatch(updateState())}>dispatch</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const updateState = () => async (dispatch: any) => {\r\n  dispatch({\r\n    type: 'test',\r\n    payload: { id: 1 }\r\n  })\r\n}\r\n","export const diff = (obj1: any, obj2: any) => {\r\n  // Make sure an object to compare is provided\r\n  if (!obj2 || Object.prototype.toString.call(obj2) !== '[object Object]') {\r\n    return obj1\r\n  }\r\n\r\n  //\r\n  // Variables\r\n  //\r\n\r\n  const diffs = {}\r\n  let key\r\n\r\n  //\r\n  // Methods\r\n  //\r\n\r\n  /**\r\n   * Check if two arrays are equal\r\n   * @param  {Array}   arr1 The first array\r\n   * @param  {Array}   arr2 The second array\r\n   * @return {Boolean}      If true, both arrays are equal\r\n   */\r\n  const arraysMatch = function (arr1: any, arr2: any) {\r\n    // Check if the arrays are the same length\r\n    if (arr1.length !== arr2.length) return false\r\n\r\n    // Check if all items exist and are in the same order\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      if (arr1[i] !== arr2[i]) return false\r\n    }\r\n\r\n    // Otherwise, return true\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Compare two items and push non-matches to object\r\n   * @param  {*}      item1 The first item\r\n   * @param  {*}      item2 The second item\r\n   * @param  {String} key   The key in our object\r\n   */\r\n  const compare = (item1: any, item2: any, key: any) => {\r\n    // Get the object type\r\n    const type1 = Object.prototype.toString.call(item1)\r\n    const type2 = Object.prototype.toString.call(item2)\r\n\r\n    // If type2 is undefined it has been removed\r\n    if (type2 === '[object Undefined]') {\r\n      diffs[key] = null\r\n      return\r\n    }\r\n\r\n    // If items are different types\r\n    if (type1 !== type2) {\r\n      diffs[key] = item2\r\n      return\r\n    }\r\n\r\n    // If an object, compare recursively\r\n    if (type1 === '[object Object]') {\r\n      const objDiff = diff(item1, item2)\r\n      if (Object.keys(objDiff).length > 0) {\r\n        diffs[key] = objDiff\r\n      }\r\n      return\r\n    }\r\n\r\n    // If an array, compare\r\n    if (type1 === '[object Array]') {\r\n      if (!arraysMatch(item1, item2)) {\r\n        diffs[key] = item2\r\n      }\r\n      return\r\n    }\r\n\r\n    // Else if it's a function, convert to a string and compare\r\n    // Otherwise, just compare\r\n    if (type1 === '[object Function]') {\r\n      if (item1.toString() !== item2.toString()) {\r\n        diffs[key] = item2\r\n      }\r\n    } else {\r\n      if (item1 !== item2) {\r\n        diffs[key] = item2\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // Compare our objects\r\n  //\r\n\r\n  // Loop through the first object\r\n  for (key in obj1) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (obj1.hasOwnProperty(key)) {\r\n      compare(obj1[key], obj2[key], key)\r\n    }\r\n  }\r\n\r\n  // Loop through the second object and find missing items\r\n  for (key in obj2) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (obj2.hasOwnProperty(key)) {\r\n      if (!obj1[key] && obj1[key] !== obj2[key]) {\r\n        diffs[key] = obj2[key]\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the object of differences\r\n  return diffs\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { AnyAction } from 'redux'\r\nimport StackTracey from 'stacktracey'\r\nimport { diff } from './helpers'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { IStyle, IOrder } from './types'\r\n\r\nexport interface ITraceProps {\r\n  action: AnyAction\r\n  style?: IStyle\r\n  details?: {\r\n    collapsed?: boolean\r\n    action?: boolean\r\n    previousState?: boolean\r\n    currentState?: boolean\r\n    differences?: boolean\r\n    previousStateObj?: any\r\n    currentStateObj?: any\r\n    order?: IOrder[]\r\n  }\r\n}\r\n\r\nexport const trace = ({\r\n  action,\r\n  style = {\r\n    actionName: 'color: Chartreuse;',\r\n    path: 'color: white;',\r\n    lineNumber: 'color: magenta;'\r\n  },\r\n  details = {\r\n    collapsed: false,\r\n    action: false,\r\n    previousState: false,\r\n    currentState: false,\r\n    differences: false,\r\n    previousStateObj: {},\r\n    currentStateObj: {},\r\n    order: ['Action', 'Previous State', 'Current State', 'State Differences']\r\n  }\r\n}: ITraceProps): void => {\r\n  const error = new Error('')\r\n  const stack = new StackTracey(error.stack)\r\n  const stacksWithSource = stack.withSources()\r\n\r\n  const calleeExclude = [\r\n    'Object.dispatch',\r\n    'dispatch',\r\n    'HTMLUnknownElement.callCallback',\r\n    'Object.invokeGuardedCallbackDev',\r\n    'invokeGuardedCallback',\r\n    'invokeGuardedCallbackAndCatchFirstError',\r\n    'executeDispatch',\r\n    'processDispatchQueueItemsInOrder',\r\n    'processDispatchQueue',\r\n    'dispatchEventsForPlugins',\r\n    'batchedEventUpdates$1',\r\n    'batchedEventUpdates',\r\n    'scheduler.development.js',\r\n    'trace',\r\n    'logger.ts',\r\n    'unstable_runWithPriority'\r\n  ]\r\n\r\n  const fileNameExclude = [\r\n    'logger.ts',\r\n    'react-dom.development.js',\r\n    'serializableStateInvariantMiddleware.ts'\r\n  ]\r\n\r\n  const filtered: StackTracey = stacksWithSource.filter(\r\n    (a) =>\r\n      !calleeExclude.includes(a.callee) &&\r\n      !fileNameExclude.includes(a.fileName) &&\r\n      !a.file.includes('node_modules')\r\n  )\r\n\r\n  const item = filtered.items[filtered.items.length - 1]\r\n\r\n  const spliced = item.file.split('/')\r\n  const splicedIndex = spliced.findIndex((a) => a === 'src')\r\n  const file = spliced.splice(splicedIndex + 1, spliced.length - 1).join('/')\r\n\r\n  console.log(\r\n    `%cRedux Action Trace\\n%c[${action.type}] %c${file} %c${item.line}`,\r\n    'color: #999; font-size: 10px;',\r\n    style.actionName,\r\n    style.path,\r\n    style.lineNumber\r\n  )\r\n\r\n  if (details.action || details.currentState || details.previousState)\r\n    details.collapsed\r\n      ? console.groupCollapsed('%cDetails', 'color:#999; font-size:10px')\r\n      : console.group('%cDetails', 'color:#999; font-size:10px')\r\n\r\n  const logs = {\r\n    Action: {\r\n      name: 'Action',\r\n      enable: details.action,\r\n      log: () =>\r\n        console.log(\r\n          '%cAction:            ',\r\n          `${style.actionName}; font-size:11px;`,\r\n          action\r\n        )\r\n    },\r\n    'Previous State': {\r\n      name: 'Previous State:',\r\n      enable: details.previousState,\r\n      log: () =>\r\n        console.log(\r\n          '%cPrevious State:    ',\r\n          'color: DodgerBlue; font-size: 11px',\r\n          details.previousStateObj\r\n        )\r\n    },\r\n    'Current State': {\r\n      name: 'Current State',\r\n      enable: details.currentState,\r\n      log: () =>\r\n        console.log(\r\n          '%cCurrent State:     ',\r\n          'color: OrangeRed;font-size: 11px ',\r\n          details.currentStateObj\r\n        )\r\n    },\r\n    'State Differences': {\r\n      name: 'State Differences   ',\r\n      enable: details.differences,\r\n      log: () =>\r\n        console.log(\r\n          '%cState Differences: ',\r\n          'color: Gold; font-size: 11px;',\r\n          diff(details.previousStateObj, details.currentStateObj)\r\n        )\r\n    }\r\n  }\r\n\r\n  details.order &&\r\n    details.order.forEach((name: string) => {\r\n      if (logs[name].enable) logs[name].log()\r\n    })\r\n\r\n  if (details.action || details.currentState || details.previousState)\r\n    console.groupEnd()\r\n}\r\n","const initialState: any = {\r\n  id: null,\r\n  name: 'test'\r\n}\r\n\r\nexport const testReducer = (\r\n  state: any = initialState,\r\n  { type, payload }: any\r\n): any => {\r\n  switch (type) {\r\n    case 'test':\r\n      return {\r\n        ...state,\r\n        ...payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, combineReducers, Store } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { config } from 'redux-action-trace'\r\n\r\nimport { testReducer } from './reducer'\r\n\r\nconst reduxActionTrace = config({\r\n  disable: false,\r\n  style: {\r\n    actionName: 'color: Chartreuse; font-size: 12px;',\r\n    path: 'color:white;',\r\n    lineNumber: 'font-size: 12px; color:magenta'\r\n  },\r\n  details: {\r\n    collapsed: true,\r\n    action: true,\r\n    currentState: true,\r\n    previousState: true,\r\n    differences: true,\r\n    order: ['Action', 'Current State', 'Previous State', 'State Differences']\r\n  }\r\n})\r\n\r\nconst middleware = applyMiddleware(thunk, reduxActionTrace)\r\n\r\nconst rootReducer = combineReducers({\r\n  test: testReducer\r\n})\r\n\r\nconst store: Store = createStore(rootReducer, middleware)\r\n\r\nexport { store }\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { Middleware } from 'redux'\r\nimport { trace } from './trace'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { IOrder, IStyle } from './types'\r\n\r\nexport interface IConfigProps {\r\n  disable?: boolean\r\n  style?: IStyle\r\n  details?: {\r\n    collapsed?: boolean\r\n    action?: boolean\r\n    previousState?: boolean\r\n    currentState?: boolean\r\n    differences?: boolean\r\n    order?: IOrder[]\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nexport const reduxActionTrace: Middleware = (store) => (next) => (\r\n  action\r\n): Middleware => {\r\n  try {\r\n    trace({\r\n      action\r\n    })\r\n    const result = next(action)\r\n    return result\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nexport const config = ({\r\n  disable = false,\r\n  style,\r\n  details = {\r\n    collapsed: false,\r\n    action: false,\r\n    previousState: false,\r\n    currentState: false,\r\n    differences: false,\r\n    order: ['Action', 'Previous State', 'Current State', 'State Differences']\r\n  }\r\n}: IConfigProps): Middleware => {\r\n  try {\r\n    let reduxActionTrace: Middleware\r\n\r\n    switch (disable) {\r\n      case true:\r\n        reduxActionTrace = (_) => (next) => (action) => {\r\n          return next(action)\r\n        }\r\n        break\r\n\r\n      default:\r\n        reduxActionTrace = (store) => (next) => (action): Middleware => {\r\n          const currentStateObj = store.getState()\r\n\r\n          const result = next(action)\r\n\r\n          const previousStateObj = store.getState()\r\n\r\n          trace({\r\n            action,\r\n            style,\r\n            details: {\r\n              ...details,\r\n              previousStateObj,\r\n              currentStateObj\r\n            }\r\n          })\r\n\r\n          return result\r\n        }\r\n        break\r\n    }\r\n\r\n    return reduxActionTrace\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}